plugins {
    id 'java'
    id 'application'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    mavenCentral()
//    maven { url "https://dl.bintray.com/algs4/maven" }
    maven { url "https://jitpack.io" }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

application {
    mainClass = 'nl.tudelft.aidm.optimalgroups.integration.PFIntegration'
    applicationDefaultJvmArgs = ["-Djava.library.path=lib"]
}
applicationDefaultJvmArgs = ["-Djava.library.path=lib"]



dependencies {

    implementation 'com.github.PhilipeLouchtch:GraphMatch-Java:c063147'
    implementation 'com.github.PhilipeLouchtch:plouchtch-lib-java:14987f7'

    implementation files('lib/Jdrasil.jar')

    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

    implementation 'org.jfree:jfreechart:1.5.3'

    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20211205'

    /* GOOGLE-OR TOOLS Stuff */
    implementation 'com.google.protobuf:protobuf-java:3.19.1'
    implementation files('lib/jniortools.dll')
    implementation files('lib/ortools.lib')
    implementation files('lib/com.google.ortools.jar')
//    implementation files('lib/protobuf.jar')

    /* GUROBI LIB*/
    implementation gurobi()


    implementation 'net.steppschuh.markdowngenerator:markdowngenerator:1.3.1.1'
    implementation 'com.vladsch.flexmark:flexmark-all:0.62.2'

//    implementation 'edu.princeton.cs:algs4:1.0.4'

    implementation 'org.sql2o:sql2o:1.6.0'
    implementation 'mysql:mysql-connector-java:8.0.25'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

wrapper {
    gradleVersion = '7.3.3'
}

compileJava {
    options.compilerArgs << '--enable-preview'
}

compileTestJava {
    options.compilerArgs << '--enable-preview'
}

static def gurobiLibsDir() {
    String gurobiHome = System.getenv("GUROBI_HOME")
    gurobiHome + File.separator + "lib" + File.separator
}

/* CHECKS GUROBI LIB EXISTS */
def gurobi() {
    String gurobiJar = gurobiLibsDir() + "gurobi.jar";
    if (!file(gurobiJar).exists())
        throw new RuntimeException("Install Gurobi and ensure env variable GUROBI_HOME points to its root dir\n (file doesn't exist: [" + gurobiJar +']')

    String gurobiJavadoc = gurobiLibsDir() + "gurobi-javadoc.jar"
    if (!file(gurobiJavadoc).exists())
        throw new RuntimeException("Install Gurobi and ensure env variable GUROBI_HOME points to its root dir\n (file doesn't exist: [" + gurobiJavadoc +']')

    return files(gurobiJar, gurobiJavadoc)
}